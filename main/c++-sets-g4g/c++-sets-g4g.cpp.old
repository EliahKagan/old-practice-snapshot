#include <algorithm>
#include <cstddef>
#include <iostream>
#include <iterator>
#include <vector>

namespace {
    void print(const std::vector<int>::const_iterator first,
               const std::vector<int>::const_iterator last)
    {
        static auto out = std::ostream_iterator<int>(std::cout, " ");

        if (first == last) {
            std::cout << "0\n";
        } else {
            std::copy(first, last, out);
            std::cout << '\n';
        }
    }
}

int main()
{
    std::ios_base::sync_with_stdio(false);

    auto t = 0;
    for (std::cin >> t; t > 0; --t) {
        std::vector<int>::size_type m {}, n {};
        std::cin >> m >> n;

        std::vector<int> a (m), b (n), c (m + n);
        for (auto& e : a) std::cin >> e;
        for (auto& e : b) std::cin >> e;

        std::sort(a.begin(), a.end());
        std::sort(b.begin(), b.end());

        const auto ap = a.cbegin(), aq = a.cend();
        const auto bp = b.cbegin(), bq = b.cend();
        const auto cp = c.begin();

        print(cp, std::set_union(ap, aq, bp, bq, cp));
        print(cp, std::set_difference(ap, aq, bp, bq, cp));
        print(cp, std::set_intersection(ap, aq, bp, bq, cp));
    }
}
