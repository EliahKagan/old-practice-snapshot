import java.util.BitSet;
import java.util.stream.IntStream;

final class Arith {
    private static BitSet rawSieve(final int n)
    {
        final int len = (n + 1) / 2;
        final BitSet bits = new BitSet(len);
        bits.set(0, len);
        
        final int istop = (int)Math.sqrt(n) / 2 + 1;
        for (int i = 1; i != istop; ++i) {
            if (bits.get(i)) {
                final int jstep = i * 2 + 1;
                for (int j = (i + 1) * i * 2; j < len; j += jstep)
                    bits.clear(j);
            }
        }
        
        return bits;
    }
    
    private static int[] sieve(final int n)
    {
        final BitSet bits = rawSieve(n);
        
        return IntStream.concat(IntStream.of(2),
                bits.stream().skip(1L).map(i -> i * 2 + 1)).toArray();
    }
    
    static int[] getUpperTwinPrimes(final int n)
    {        
        final int[] primes = sieve(n);
        
        return IntStream.range(1, primes.length)
                        .filter(i -> primes[i] - primes[i - 1] == 2)
                        .map(i -> primes[i])
                        .toArray();
    }
    
    private Arith() { } // the Arith class should not be instantiated
}

final class Solution {
    public static void main(final String[] args)
    {
        final int nmax = 10_000_000;
        final int[] a = Arith.getUpperTwinPrimes(nmax);
        
        try (final java.util.Scanner sc = new java.util.Scanner(System.in)) {
            for (int t = sc.nextInt(); t > 0; --t) {
                final int i = java.util.Arrays.binarySearch(a, sc.nextInt());
                System.out.println((i < 0 ? ~i - 1 : i) + 1);
            }
        }
    }
    
    private Solution() { } // the Solution class should not be instantiated
}
