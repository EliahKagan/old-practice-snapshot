#ifdef _MSC_VER
#define _CRT_SECURE_NO_WARNINGS
#endif

#ifdef __MINGW32__
#define __USE_MINGW_ANSI_STDIO 1
#endif

#include <stdio.h>
#include <stdlib.h>

static int *alloc_record(const size_t n) // helper function for read_record()
{
    if (n == 0u) abort();
    
    int *const p = calloc(n, sizeof *p);
    if (p == NULL) abort();
    return p;
}

static int *read_record(const size_t n)
{
    int *const p = alloc_record(n);
    for (int *const end = p + n, *q = p; q != end; ++q) (void)scanf("%d", q);
    return p;
}

static void print_first_negative_in_each_window(const int *p, const size_t n,
                                                              size_t k)
{
    enum { no_value = 0 };
    
    if (k == 0u) abort();
    
    if (k <= n) {
        const int *const end = p + n, *q = p;
        for (; k != 0u && *q >= 0; --k) ++q;
        
        const int *r = q;
        for (; k != 0u; --k) ++r;
        printf("%d", (q == r ? no_value : *q));
        
        while (r != end) {
            ++r;
            if (q < ++p)
                while (++q != r && *q >= 0) { }
            
            printf(" %d", (q == r ? no_value : *q));
        }
    }
    
    putchar('\n');
}

int main(void)
{
    int t = 0;
    for ((void)scanf("%d", &t); t > 0; --t) {
        size_t n = 0u;
        (void)scanf("%zu", &n);
        
        int *const p = read_record(n);
        
        size_t k = 0u;
        (void)scanf("%zu", &k);
        
        print_first_negative_in_each_window(p, n, k);
        
        free(p);
    }
}
