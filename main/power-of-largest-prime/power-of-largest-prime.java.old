final class Arith {
    static final int PRIMES_DEFAULT_MAX = 1_000_000_000;
    static final int PRIMES_DEFAULT_COUNT = 50_847_534;
    
    static int sqrt32(final int n)
    {
        return (int)Math.round(Math.floor(Math.sqrt(n)));
    }
    
    static long sqrt64(final long n)
    {
        return Math.round(Math.floor(Math.sqrt(n)));
    }
    
    private static void sieve(final int n, final long[] dest)
    {
        final int len = (n + 1) / 2;
        final java.util.BitSet bits = new java.util.BitSet(len);
        bits.set(0, len);
        
        dest[0] = 2L;
        int k = 1;
        
        final int istop = sqrt32(n) / 2 + 1;
        for (int i = 1; i != istop; ++i) {
            if (bits.get(i)) {
                final int p = i * 2 + 1;
                dest[k++] = p;
                for (int j = (i + 1) * i * 2; j < len; j += p) bits.clear(j);
            }
        }
    }
    
    static long[] primes(final int n, final int len)
    {
        final long[] dest = new long[len];
        sieve(n, dest);
        return dest;
    }
    
    static long[] primes()
    {
        return primes(PRIMES_DEFAULT_MAX, PRIMES_DEFAULT_COUNT);
    }
    
    static long maxPrimeDivisor(final long[] primes, long n)
    {
        if ((n & 1L) == 0L) { // quickly remove factors of 2
            do n >>>= 1L;
            while ((n & 1L) == 0L);
            
            if (n == 1L) return 2L;
        }
        
        final long sqrt = sqrt64(n);
        for (int i = 1; i != primes.length && primes[i] <= sqrt; ++i) {
            if (n % primes[i] == 0) {
                do n /= primes[i];
                while (n % primes[i] == 0);
                
                if (n == 1L) return primes[i];
            }
        }
        
        return n; // whatever remains must be a single prime factor > sqrt
    }
    
    private Arith() { } // the Arith class should not be instantiated
}

final class Solution {
    public static void main(final String[] args)
    {
        final long[] primes = Arith.primes();
        int z = 0;
        for (int i = primes.length; primes[--i] == 0; ) ++z;
        System.err.format("DEBUG: %d trailing zero(s) found.%n", z);
        
        try (final java.util.Scanner sc = new java.util.Scanner(System.in)) {
            for (int t = sc.nextInt(); t > 0; --t) {
                final long n = sc.nextLong();
                final long p = Arith.maxPrimeDivisor(primes, n);
                System.out.println(n % (p * p) == 0L ? "YES" : "NO");
            }
        }
    }
    
    private Solution() { } // the Solution class should not be instantated
}
