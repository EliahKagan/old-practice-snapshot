#include <array>
#include <iostream>

namespace {
    constexpr std::size_t nmax {100u};
    
    using Table = std::array<std::array<bool, nmax>, nmax>; // adjacency matrix
    
    // Builds an adjacency matrix from a stream of 0s and 1s read from stdin.
    void populate_adjacency_table(Table& adj, const std::size_t n)
    {
        for (std::size_t i {0u}; i != n; ++i)
            for (std::size_t j {0u}; j != n; ++j) std::cin >> adj[i][j];
    }
    
    // Adds an edge from orig to each next reachable from cur. Helper for
    // make_table_transitive(). Nonrecursive calls should use orig == cur.
    void connect_to_reachable(Table& adj, const std::size_t n,
                              const std::size_t orig, const std::size_t cur)
    {
        for (std::size_t next {0u}; next != n; ++next) {
            if (adj[cur][next] && !adj[orig][next])
            
            //if (adj[cur][next]) {
            //    adj[orig][next] = true;
            //    if (next != orig) connect_to_reachable(adj, n, orig, next);
            //}
        }
    }
    
    // Turns a graph's adjacency matrix into the adjacency matrix for its
    // transitive closure.
    void make_table_transitive(Table& adj, const std::size_t n)
    {
        for (std::size_t orig {0u}; orig != n; ++orig)
            connect_to_reachable(adj, n, orig, orig);
    }
    
    // Prints the contents of a table on a single line, in row-major order.
    void print_table(const Table& table)
    {
        for (const auto& row : table)
            for (const auto& x : row) std::cout << x << ' ';
        
        std::cout << '\n';
    }
}

int main()
{
    std::ios_base::sync_with_stdio(false);
    
    Table adj {};
    
    auto t = 0;
    for (std::cin >> t; t > 0; --t) {
        std::size_t n {};
        std::cin >> n;
        
        populate_adjacency_table(adj, n);
        make_table_transitive(adj, n);
        print_table(adj);
    }
}
