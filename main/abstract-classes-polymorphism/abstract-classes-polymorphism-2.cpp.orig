#include <iostream>
#include <vector>
#include <map>
#include <string>
#include <algorithm>
#include <set>
#include <cassert>
using namespace std;

struct Node {
    Node* next;
    Node* prev;
    int value;
    int key;
    Node(Node* p, Node* n, int k, int val) :prev(p), next(n), key(k), value(val) {};
    Node(int k, int val) :prev(NULL), next(NULL), key(k), value(val) {};
};

class Cache {

protected:
    map<int, Node*> mp; //map the key to the node in the linked list
    int cp;  //capacity
    Node* tail; // double linked list tail pointer
    Node* head; // double linked list head pointer
    virtual void set(int, int) = 0; //set function
    virtual int get(int) = 0; //get function

};

namespace {
    class LRUCache {
    private:
        struct Node;
        using Map = map<int, Node*>;

    public:
        using Size = Map::size_type;

        explicit LRUCache(const Size capacity) : capacity {capacity} { }
    
        explicit LRUCache(const LRUCache&) = delete;
        explicit LRUCache(LRUCache&&) = delete;
    
        LRUCache& operator=(const LRUCache&) = delete;
        LRUCache& operator=(LRUCache&&) = delete;
    
        ~LRUCache();
    
        void set(int key, int value);
        int get(int key);
    
        static constexpr int element_not_found() { return -1; }
    
    private:
        Map lookup {};
        Node* head {nullptr}, * tail {nullptr};
        const Size capacity;

        void move_to_head(Node* node);
        inline void assign_and_move_to_head(Node* node, int value);
    };

    struct LRUCache::Node {
        Node* prev, * next;
        int key, value;

        Node(Node *const prev, Node *const next,
                const int key, const int value)
            : prev {prev}, next {next}, key {key}, value {value} { }

        Node(const int key, const int value)
            : Node{nullptr, nullptr, key, value} { }
    };

    LRUCache::~LRUCache()
    {
        for (; head != nullptr; head = head->next) delete head->prev;
        delete tail;
    }

    void LRUCache::set(const int key, const int value)
    {
        const auto entp = lookup.find(key);
    
        if (entp != lookup.end()) {
            assign_and_move_to_head(entp->second, value);
            return;
        }
    
        if (lookup.empty()) head = tail = new Node(key, value);
        else if (lookup.size() < capacity) {
            head->prev = new Node(nullptr, head, key, value);
            head = head->prev;
        } else {
            lookup.erase(tail->key);
            assign_and_move_to_head(tail, value);
        }
    
        lookup.emplace(key, head);
    }

    int LRUCache::get(int key)
    {
        const auto entp = lookup.find(key);
    
        if (entp == lookup.end()) return element_not_found();
    
        move_to_head(entp->second);
        return head->value;
    }

    void LRUCache::move_to_head(Node* const node)
    {
        if (node->prev == nullptr) return; // already at head
    
        // remove node from its current position in the list
        node->prev->next = node->next;
        (node->next == nullptr ? tail : node->next->prev) = node->prev;
    
        // re-add node at the head of the list
        node->prev = nullptr;
        node->next = head;
        head->prev = node;
        head = node;
    }

    inline void LRUCache::assign_and_move_to_head(Node* const node,
                                                  const int value)
    {
        node->value = value;
        move_to_head(node);
    }
}

int main() {
    int n, capacity, i;
    cin >> n >> capacity;
    LRUCache l(capacity);
    for (i = 0; i<n; i++) {
        string command;
        cin >> command;
        if (command == "get") {
            int key;
            cin >> key;
            cout << l.get(key) << endl;
        }
        else if (command == "set") {
            int key, value;
            cin >> key >> value;
            l.set(key, value);
        }
    }
    return 0;
}
