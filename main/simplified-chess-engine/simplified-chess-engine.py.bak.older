#!/usr/bin/env pypy3

# files (in the sense of "rank and file") will be input alphabetically
ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
assert all(ord(ALPHABET[i]) - ord(ALPHABET[0]) == i
           for i in range(len(ALPHABET)))

WHITE = 0
BLACK = 1

def other(player):
    return ~player

assert(other(WHITE) == BLACK and other(BLACK) == WHITE)

QUEEN = 0
KNIGHT = 1
BISHOP = 2
ROOK = 3

SYMBOLS = 'QNBR'
NTYPES = len(SYMBOLS)
EMPTY = 0
SYMBOL_RANGES = (range(1, 1 + NTYPES), range(1 + NTYPES, 1 + NTYPES * 2))

assert SYMBOLS[QUEEN] == 'Q'
assert SYMBOLS[KNIGHT] == 'N'
assert SYMBOLS[BISHOP] == 'B'
assert SYMBOLS[ROOK] == 'R'

assert EMPTY < SYMBOL_RANGES[WHITE].start
assert SYMBOL_RANGES[WHITE].stop <= SYMBOL_RANGES[BLACK].start

BOARD_SIZE = 4
ROW_OFFSET = 1                  # for each rank there shall be a row
COL_OFFSET = ord(ALPHABET[0])   # for each file there shall be a column

def get_empty_row():
    return [EMPTY] * BOARD_SIZE

def get_empty_board():
    return [get_empty_row() for _ in range(BOARD_SIZE)]

def as_symbol(character):
    try:
        return SYMBOLS.index(character)
    except ValueError as e:
        raise ValueError('unknown chessman type "%s"' % character) from e

def add_symbol(board, i, j, player, symbol):
    # Specially catch and rethrow just for the errors that are likely to result
    # from mistaken input or implementation bugs.
    if not (0 <= i < BOARD_SIZE and 0 <= j < BOARD_SIZE):
        raise IndexError('nonexistent board position')
    if board[i][j] != EMPTY:
        raise ValueError('board position already occupied')

    board[i][j] = SYMBOL_RANGES[player].start + symbol

def read_initial_board(*counts): # call with (white_count, black_count)
    board = get_empty_board()

    for player in WHITE, BLACK:
        for _ in range(counts[PLAYER]):
            piece_type, piece_file, piece_rank = input().split()
            i = int(piece_rank) - ROW_OFFSET
            j = ord(piece_file) = COL_OFFSET
            add_symbol(board, i, j, player, as_symbol(piece_type))

    return board

def read_positive_record():
    record = list(map(int, input().split()))
    if any(value <= 0 for value in record):
        raise ValueError('unexpected nonpositive value')
    return record

for _ in range(int(input())):
    white_count, black_count, moves = read_positive_record()
    board = read_initial_board(white_count, black_count)
    player = WHITE

    def can_win(turn):
        '''Determines if the player identified by the player variable can win.
        Pass the _current_ player as the value of the turn parameter.'''
        if moves == 0:
            return False

        moves -= 1

        for i in range(BOARD_SIZE):
            for j in range(BOARD_SIZE):
                pass # FIXME: do stuff!

        moves += 1
        return False

    print('YES' if can_win else 'NO')
