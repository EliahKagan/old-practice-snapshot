#include <algorithm>
#include <cassert>
#include <cstddef>
#include <iostream>
#include <iterator>
#include <numeric>
#include <queue>
#include <vector>

namespace {
    using std::size_t;

    class IndexComparer {
    public:
        explicit IndexComparer(const std::vector<int>& a) noexcept : ap_{&a} { }

        bool operator()(const size_t i, const size_t j) const noexcept
        {
            return (*ap_)[i] < (*ap_)[j];
        }

    private:
        const std::vector<int>* ap_;
    };

    using IndexMaxheap =
            std::priority_queue<size_t, std::vector<size_t>, IndexComparer>;

    std::vector<size_t> get_sorted_indices(const std::vector<int>& values)
    {
        std::vector<size_t> indices (values.size());
        const auto first = std::begin(indices), last = std::end(indices);

        std::iota(first, last, size_t{});
        std::sort(first, last, IndexComparer{values});

        return indices;
    }
}

class Solution {
public:
    static int findMaximizedCapital(int max_projects, int principal,
                                    const std::vector<int>& profits,
                                    const std::vector<int>& capital);
};

int Solution::findMaximizedCapital(int max_projects, int principal,
                                   const std::vector<int>& profits,
                                   const std::vector<int>& capital)
{
    assert(profits.size() == capital.size());

    const auto indices = get_sorted_indices(capital);
    const auto last = std::cend(indices);
    auto first = std::cbegin(indices);

    for (std::priority_queue<int> heap; !heap.empty(); heap.pop()) {
        if (--max_projects < 0) break;

        for (; first != last && capital[*first] <= principal; ++first)
            heap.push(profits[*first]);

        principal += heap.top();
    }

    return principal;
}
