/* A binary Tree node
struct node
{
    int data;
    struct node *left, *right;
}; */

namespace {
    enum class Side { left, right };
    
    // Advances the state of the depth-first search.
    // Returns false when done (found or absent), and true otherwise.
    inline bool advance(stack<Side>& next_subtrees, stack<node*>& path
                        node *const target)
    {
        if (next_subtrees.empty()) return false; // done
        
        switch (next_subtrees.top()) {
        case Side::left:
            if (path.top() == target) return false; // done
            
            if (path.top() == nullptr) {
                path.pop();
                next_subtrees.pop();
            } else {
                path.push(path.top()->left);
                next_subtrees.push(Side::left);
            }
            
            return true;
            
        case Side::right:
            
        }
        
        throw std::invalid_argument{"invalid Side enumeration value"};
    }
    
    stack<node*> dfs(node* const root, node *const target)
    {
        stack<Side> next_subtrees;
        next_subtrees.push(Side::left);
        
        stack<node*> path;
        path.push(root);
        
        while (advance(next_subtrees, path, target)) { }
        return path;
    }
}

/* Recursive function to print all the nodes at distance k in the
   tree (or subtree) rooted with given root. See  */
void printkdistanceNodeDown(node* root, const int k)
{
// Your code here
}

/* Prints all nodes at distance k from a given target node.
 The k distant nodes may be upward or downward.  This function
 Returns distance of root from target node, it returns -1 if target
 node is not present in tree rooted with root. */
int printkdistanceNode(node* root, node* target, const int k)
{
// Your code here
}
