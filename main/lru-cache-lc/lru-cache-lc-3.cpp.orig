class LRUCache {
public:
    explicit LRUCache(int capacity);

    LRUCache(const LRUCache&) = delete;
    LRUCache(LRUCache&&) = default;
    LRUCache& operator=(const LRUCache&) = delete;
    LRUCache& operator=(LRUCache&&) = default;
    ~LRUCache() = default;

    int get(int key);

    void put(int key, int value);

private:
    struct Entry {
        Entry(int key, int value) noexcept; // so Entry objects can be emplaced

        int key, value;
    };

    static constexpr auto not_found = -1;

    void bump(std::list<Entry>::iterator node);

    std::unordered_map<int, std::list<Entry>::iterator> map_;

    std::list<Entry> chain_;

    decltype(chain_)::size_type capacity_;
};

LRUCache::LRUCache(const int capacity)
        : capacity_{static_cast<decltype(capacity_)>(capacity)}
{
}

int LRUCache::get(const int key)
{
    const auto p = map_.find(key);
    if (p == std::end(map_)) return not_found;

    const auto node = p->second;
    bump(node);
    return node->value;
}

void LRUCache::put(const int key, const int value)
{
    if (!capacity_) return;

    const auto p = map_.find(key);

    if (p != std::end(map_)) {
        const auto node = p->second;
        node->value = value;
        bump(node);
    }
    else if (chain_.size() == capacity_) {
        const auto node = std::prev(std::end(chain_));

        map_.erase(node->key);
        node->key = key;
        node->value = value;
        map_.emplace(key, node);

        bump(node);
    } else {
        assert(chain_.size() < capacity_);

        chain_.emplace_front(key, value);
        map_.emplace(key, chain_.begin());
    }
}

LRUCache::Entry::Entry(const int key, const int value) noexcept
        : key{key}, value{value}
{
}

constexpr int LRUCache::not_found;

void LRUCache::bump(const std::list<Entry>::iterator node)
{
    chain_.splice(std::begin(chain_), chain_, node);
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
