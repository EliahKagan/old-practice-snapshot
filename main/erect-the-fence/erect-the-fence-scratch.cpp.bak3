#include <algorithm>
#include <cassert>
#include <cmath>
#include <deque>
#include <iostream>
#include <iterator>
#include <vector>

using namespace std;

struct Point {
    int x;
    int y;
    Point() : x(0), y(0) {}
    Point(int a, int b) : x(a), y(b) {}
};

class Solution {
public:
    static vector<Point> outerTrees(const vector<Point>& points);
};

namespace {
    using It = vector<Point>::const_iterator;

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
    const auto k_tau = acos(-1.0) * 2.0;
#ifdef __clang__
#pragma clang diagnostic pop
#endif

    // The angle between (99, 100) and (100, 100) is ~0.005 radians, so this is
    // sufficiently small to distinguish any distinct angles that will arise.
    constexpr auto k_epsilon = 0.0001;

    It arbitrary_leftmost(const vector<Point>& points) noexcept
    {
        const auto min_x = [](const Point& lhs, const Point& rhs) noexcept {
            return lhs.x < rhs.x;
        };

        const auto s = min_element(cbegin(points), cend(points), min_x);
        assert(s != cend(points));
        return s;
    }

    // Computes the angle of the arrow from tail to head, clockwise from north.
    // A negative angle may be returned, to be interpreted as counterclockwise.
    inline double nautical_angle(const Point& tail, const Point& head) noexcept
    {
        return atan2(head.x - tail.x, head.y - tail.y);
    }

    // Gets the nonnegative angle from from_angle to to_angle.
    // Rounds down to zero if the angle is smaller than the error margin.
    inline double delta(const double from_angle, const double to_angle) noexcept
    {
        auto d = to_angle - from_angle;
        if (d < 0.0) d += k_tau;
        return d > k_epsilon ? d : 0.0;
    }

    // Given a bias that is interpreted as a nautical angle, computes the
    // nonnegative angle clockwise from it to the arrow from tail to head.
    inline double biased_angle(const double bias,
                               const Point& tail, const Point& head) noexcept
    {
        const auto delta = nautical_angle(tail, head) - bias;
        return delta < 0.0 ? delta + k_tau : delta;
    }

    inline int taxicab_distance(const Point& a, const Point& b) noexcept
    {
        return abs(a.x - b.x) + abs(a.y - b.y);
    }
}

vector<Point> Solution::outerTrees(const vector<Point>& points)
{
    const auto s = arbitrary_leftmost(points);
    vector<Point> hull;
    hull.push_back(*s);
    if (points.size() == 1u) return hull;

    deque<bool> vis (points.size());
    const auto sv = begin(vis) + (s - cbegin(points));
    *sv = true;

    auto p = next_point(points, vis, s);
    *sv = false;

    do {
        hull.push_back(*p);
        p = next_point(points, vis, p);
    }
    while (p != s);

    return hull;
}

namespace {
    void test(const vector<Point>& points)
    {
        const auto hull = Solution::outerTrees(points);

        for (const auto& point : hull)
            cout << point.x << ' ' << point.y << '\n';
        
        cout << '\n';
    }
}

int main()
{
    test({{1,1}, {2,2}, {2,0}, {2,4}, {3,3}, {4,2}});
    test({{1,2}, {2,2}, {4,2}});
}
