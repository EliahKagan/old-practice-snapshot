#include <algorithm>
#include <cassert>
#include <cmath>
#include <deque>
#include <iostream>
#include <iterator>
#include <vector>

using namespace std;

struct Point {
    int x;
    int y;
    Point() : x(0), y(0) {}
    Point(int a, int b) : x(a), y(b) {}
};

class Solution {
public:
    static vector<Point> outerTrees(const vector<Point>& points);
};

namespace {
    using It = vector<Point>::const_iterator;

#ifdef __clang__
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wglobal-constructors"
#endif
    const auto pi = acos(-1.0);
#ifdef __clang__
#pragma clang diagnostic pop
#endif

    // The angle between (99, 100) and (100, 100) is ~0.005 radians, so this is
    // sufficiently small to distinghish any distinct angles that will arise.
    constexpr auto epsilon = 0.0001;

    It arbitrary_leftmost(const vector<Point>& points) noexcept
    {
        const auto min_x = [](const Point& lhs, const Point& rhs) noexcept {
            return lhs.x < rhs.x;
        };

        const auto s = min_element(cbegin(points), cend(points), min_x);
        assert(s != cend(points));
        return s;
    }

    // computes the angle from origin to other, clockwise from north
    inline double nautical_angle(const Point& origin,
                                 const Point& other) noexcept
    {
        const auto theta = atan2(other.x - origin.x, other.y - origin.y);
        return theta < 0.0 ? theta + pi * 2.0 : theta;
    }

    inline int taxicab_distance(const Point& a, const Point& b) noexcept
    {
        return abs(a.x - b.x) + abs(a.y - b.y);
    }

    inline bool is_better(const Point& origin,
                          const Point& lhs, const Point& rhs) noexcept
    {
        const auto lhs_angle = nautical_angle(origin, lhs);
        const auto rhs_angle = nautical_angle(origin, rhs);

        // If the angles are distinguishable, the lower one wins.
        if (fabs(lhs_angle - rhs_angle) > epsilon)
            return lhs_angle < rhs_angle;

        // Otherwise, points are colinear and in the same direction, so
        // whichever one is closer wins. Because they are colinear, comparisons
        // in the simpler taxicab (Manhattan) metric will give the same results
        // as comparisons in the Euclidean (Pythagorean) metric.
        return taxicab_distance(origin, lhs) < taxicab_distance(origin, rhs);
    }

    It next_point(const vector<Point>& points, deque<bool>& vis,
                  const It p) noexcept
    {
        // pick any unvisited point as the initial guess for the best
        auto best_q = cbegin(points);
        auto best_v = begin(vis);
        for (; *best_v; ++best_v) ++best_q;

        auto v = best_v;
        const auto qq = cend(points);

        // improve the guess by checking all other unvisited points
        for (auto q = best_q; q != qq; ++q, ++v) {
            if (!*v && is_better(*p, *q, *best_q)) {
                best_q = q;
                best_v = v;
            }
        }

        assert(v == end(vis));

        // mark new best next point as visited and return an iterator to it
        *best_v = true;
        return best_q;
    }
}

vector<Point> Solution::outerTrees(const vector<Point>& points)
{
    const auto s = arbitrary_leftmost(points);
    vector<Point> hull;
    hull.push_back(*s);
    if (points.size() == 1u) return hull;

    deque<bool> vis (points.size());
    const auto sv = begin(vis) + (s - cbegin(points));
    *sv = true;

    auto p = next_point(points, vis, s);
    *sv = false;

    do {
        hull.push_back(*p);
        p = next_point(points, vis, p);
    }
    while (p != s);

    return hull;
}

namespace {
    void test(const vector<Point>& points)
    {
        const auto hull = Solution::outerTrees(points);

        for (const auto& point : hull)
            cout << point.x << ' ' << point.y << '\n';
        
        cout << '\n';
    }
}

int main()
{
    test({{1,1}, {2,2}, {2,0}, {2,4}, {3,3}, {4,2}});
    test({{1,2}, {2,2}, {4,2}});
}
