import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import java.util.stream.Stream;

final class DisjointSetElement {
    DisjointSetElement findSet() {
        DisjointSetElement ret = this;
        while (ret._parent != ret) ret = ret._parent;

        for (DisjointSetElement cur = this; cur != ret; ) {
            final DisjointSetElement next = cur._parent;
            cur._parent = ret;
            cur = next;
        }

        return ret;
    }

    void union(final DisjointSetElement other) {
        final DisjointSetElement a = findSet(), b = other.findSet();

        if (a._rank < b._rank) {
            a._parent = b;
        } else {
            if (a._rank == b._rank) ++a._rank;
            b._parent = a;
        }
    }

    private DisjointSetElement _parent = this;

    private int _rank = 0;
}

final class DisjointSets implements Iterable<String> {
    void put(final Iterator<String> subset) {
        if (subset.hasNext()) {
            final DisjointSetElement first = getElement(subset.next());
            subset.forEachRemaining(cur -> getElement(cur).union(first));
        }
    }

    Stream<Stream<String>> stream() {
        return _elems.entrySet().stream()
                .collect(Collectors.groupingBy(kv -> kv.getValue().findSet()))
                .values().stream().map(grp -> grp.stream().map(kv -> kv.getKey()))
                .sorted();
    }

    void clear() {
        _elems.clear();
    }

    private DisjointSetElement getElement(final String key) {
        return _elems.computeIfAbsent(key, k -> new DisjointSetElement());
    }

    private final Map<String, DisjointSetElement> _elems = new HashMap<>();
}

class Solution {
    public List<List<String>>
    accountsMerge(final List<List<String>> accounts) {

    }
}
