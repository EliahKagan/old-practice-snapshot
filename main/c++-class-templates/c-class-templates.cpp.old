#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <cassert>
using namespace std;

namespace {
    template <typename T>
    class AddElements final {
    public:
        AddElements(const T elem1, const T elem2) : sum_{elem1 + elem2} { }
        T add() { return sum_; }

    private:
        T sum_;
    };

    template <>
    class AddElements<string> final {
    public:
        AddElements(const string& s1, const string& s2) : cat_{s1 + s2} { }

    private:
        string cat_;
    };
}

// code from HackerRank (not to be modified while completing this exercise)
int main () {
  int n,i;
  cin >> n;
  for(i=0;i<n;i++) {
    string type;
    cin >> type;
    if(type=="float") {
        double element1,element2;
        cin >> element1 >> element2;
        AddElements<double> myfloat (element1);
        cout << myfloat.add(element2) << endl;
    }
    else if(type == "int") {
        int element1, element2;
        cin >> element1 >> element2;
        AddElements<int> myint (element1);
        cout << myint.add(element2) << endl;
    }
    else if(type == "string") {
        string element1, element2;
        cin >> element1 >> element2;
        AddElements<string> mystring (element1);
        cout << mystring.concatenate(element2) << endl;
    }
  }
  return 0;
}