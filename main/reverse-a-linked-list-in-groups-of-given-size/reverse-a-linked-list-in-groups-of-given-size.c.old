#include<stdio.h>
#include<stdlib.h>


/* Link list node */
struct node
{
    int data;
    struct node* next;
}*head;

struct node *reverse (struct node *head, int k);

/* Reverses the linked list in groups of size k and returns the
   pointer to the new head node. */

/* UTILITY FUNCTIONS */
/* Function to push a node */

  void insert()
{
    int n,value,i;
    scanf("%d",&n);
    struct node *temp = NULL; // added = NULL
    for(i=0;i<n;i++)
    {
        scanf("%d",&value);
        if(i==0)
        {
            head=(struct node *) malloc( sizeof(struct node) );
            head->data=value;
            head->next=NULL;
            temp=head;
            continue;
        }
        else
        {
            temp->next= (struct node *) malloc( sizeof(struct node) );
            temp=temp->next;
            temp->data=value;
            temp->next=NULL;
        }
    }
}

/* Function to print linked list */
void printList(struct node *node)
{
    while (node != NULL)
    {
        printf("%d ", node->data);
        node = node->next;
    }
printf("\n");
}

/* Drier program to test above function*/
int main(void)
{
    /* Start with the empty list */

    int t,k,value,n;
     /* Created Linked list is 1->2->3->4->5->6->7->8->9 */
     scanf("%d",&t);
     while(t--)
     {
     insert();
     scanf("%d",&k);
     head = reverse(head, k);
     printList(head);
     }
     return(0);
}
/*
  Reverse a linked list
  The input list will have at least one element  
  Return pointer to head of reverse linked list 
  Node is defined as 
  struct node
  {
     int data;
     struct Node *next;
  }
*/

static struct node *advance(struct node *p, int k)
{
    for (; p->next != NULL && k != 0; --k) p = p->next;
    return p;
}

static struct node *rev(struct node *head)
{
    struct node* prev = NULL;
    
    while (head != NULL) {
        struct node *const next = head->next;
        head->next = prev;
        prev = head;
        head = next;
    }
    
    return prev;
}

struct node *reverse(struct node *head, int k)
{
    struct node fake_head = { 0, head }, *before_first = &fake_head;

    while (before_first->next != NULL) {
        struct node *before_last = advance(before_first, k);
        struct node *last = before_last->next;
        struct node *after_last = last->next;

    }

    /*
    struct node fake_head = { 0, head }, *p = &fake_head;
    
    while (p != NULL) {
        struct node *q = advance(p, k), *r = q->next;
        //if (r == NULL) break;
        
        q->next = NULL;
        rev(p->next);
        p->next->next = r;
        p->next = q;

        p = r;
    }
    
    //p->next = rev(p->next);
    */
    
    return fake_head.next;
}
