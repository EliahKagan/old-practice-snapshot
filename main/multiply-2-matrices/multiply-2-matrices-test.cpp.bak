#include <array>
#include <cstddef>
#include <iostream>

namespace {
    template<typename T, std::size_t M, std::size_t N>
    using Matrix = std::array<std::array<T, N>, M>;

    template<typename T, std::size_t L, std::size_t M, std::size_t N>
    Matrix<T, L, N> operator*(const Matrix<T, L, M>& a,
                              const Matrix<T, M, N>& b)
    {
        Matrix<T, L, N> c {};

        for (std::size_t i {0u}; i != L; ++i) {
            for (std::size_t k {0u}; k != N; ++k) {
                for (std::size_t j {0u}; j != M; ++j)
                    c[i][k] += a[i][j] * b[j][k];
            }
        }

        return c;
    }

    template<typename T, std::size_t N>
    std::ostream& operator<<(std::ostream& out, const std::array<T, N>& row)
    {
        auto p = row.cbegin();
        out << p;
        ++p;

        do out << ' ' << *p;
        while (++p != row.cend());

        return out;
    }

    template<typename T>
    inline std::ostream& operator<< <T, 0>(std::ostream& out,
                                           const std::array<T, 0>& row)
    {
        return out;
    }

    template<typename T>
    inline std::ostream& operator<< <T, 1>(std::ostream& out,
                                           const std::array<T, 1>& row)
    {
        return out << row.front();
    }

    template<typename T, std::size_t M, std::size_t N>
    std::ostream& operator<<(std::ostream& out, const Matrix<T, M, N>& matrix)
    {
        for (const auto& row : matrix) out << row << '\n';
    }
}

int main()
{
    const Matrix<int, 2, 2> a {10, 20, 30, 40};
    std::cout << a << '\n';
}
