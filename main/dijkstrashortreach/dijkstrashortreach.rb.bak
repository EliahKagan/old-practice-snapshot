#!/usr/bin/env ruby
$VERBOSE = true

# A (key, value) entry in a PrimHeap.
Entry = Struct.new(:key, :value)

# A binary minheap, modified for use in Prim's or Dijkstra's algorithm.
class PrimHeap
  def initialize(min_key, max_key)
    raise ArgumentError, 'negative length range' if min_key > max_key

    # create and populate the key => index map
    @map = (0..(max_key - min_key)).to_a
    min_key.times { @map.unshift(nil) }

    # create and populate the index => (key, value) entries
    @entries = (min_key..max_key).map { |key| Entry.new(key, Float::INFINITY) }
  end

  def empty?
    @entries.empty?
  end

  def pop
    ret = @entries.first
    @map[ret.key] = nil

    if @entries.one?
      @entries.clear
    else
      @entries[0] = @entries.pop
      sift_down(0)
    end

    ret
  end

  def decrease(key, value)
    child = @map[key]
    return if child.nil?

    ent = @entries[child]
    return if ent.value <= value

    ent.value = value
    sift_up(child)
    nil
  end

  private def sift_up(child)
    until child.zero?
      parent = (child - 1) / 2
      break if order_ok?(parent, child)

      swap(child, parent)
      child = parent
    end

    record(child)
  end

  private def sift_down(parent)
    loop do
      child = pick_child(parent)
      break if child.nil? || order_ok?(parent, child)

      swap(parent, child)
      parent = child
    end

    record(parent)
  end

  private def pick_child(parent)
    left = parent * 2 + 1
    return nil if left >= @entries.size

    right = left + 1
    right == @entries.size || order_ok?(left, right) ? left : right
  end

  private def swap(src, dest)
    @entries[dest], @entries[src] = @entries[src], @entries[dest]
    record(src)
  end

  private def record(src)
    @map[@entries[src].key] = src
  end

  private def order_ok?(parent, child)
    @entries[parent].value <= @entries[child].value
  end
end

# The endpoints of an undirected edge, without weight information.
class Endpoints
  attr_reader :u, :v

  def initialize(u, v)
    if u > v
      @u = v
      @v = u
    else
      @u = u
      @v = v
    end
  end
end
