#!/usr/bin/env perl

use strict;
use warnings;
use autodie;

use English qw(-no_match_vars);
use Readonly;

Readonly my $BACKUP_SUFFIX => '.bak';

sub check_debug {
    if (scalar(@ARGV) != 0 && $ARGV[0] eq '--debug') {
        shift @ARGV;
        return 1;
    }

    return 0;
}

my $debug = check_debug;

sub match_perlbang {
    my $line = shift;

    return $line =~ m{
            ^\#!\s*(?:/usr/(?:local/)?bin/perl  # direct path to interpreter
            |/usr/bin/env\s+perl)               # or the env trick
            (?:\s\N*)?$                         # with or without arguments
        }x;
}

sub match_copyright {
    my $line = shift;

    return $line =~ /\bCopyright\b/i;
}

sub read_two_lines {
    my $path = shift;

    open my $in, '<', $path;
    my $first = <$in>;
    my $second = <$in>;
    close $in;

    return $first, $second;
}

sub should_process {
    my $path = shift;

    if ($path =~ /$BACKUP_SUFFIX\z/) {
        if ($debug) { print {*STDERR} "SKIPPING        $path\n" }
        return 0;
    }

    my ($first, $second) = read_two_lines $path;

    if (match_perlbang($first) && !match_copyright($second)) {
        if ($debug) { print {*STDERR} "PROCESSING      $path\n" }
        return 1;
    } else {
        if ($debug) { print {*STDERR} "NOT PROCESSING  $path\n" }
        return 0;
    }
}

my @paths = @ARGV;
for my $path (@paths) {
    should_process($path) or next;

    local @ARGV = ($path);
    local $INPLACE_EDIT = $BACKUP_SUFFIX;
    my $got_perlbang = 0;

    while (<>) { # just one file at a time, to usually avoid race conditions...
        $INPUT_LINE_NUMBER < 3 or next;

        if ($INPUT_LINE_NUMBER == 1) {  # ...but still (re)check when writing
            if (match_perlbang $_) { $got_perlbang = 1 }
        } elsif ($got_perlbang && !match_copyright $_) {  # as this is 2nd line
            print "## Copyright (C) 2017 by Eliah Kagan\n";
        }
    } continue {
        print;
        if (eof ARGV) { close ARGV }  # TODO: figure out if we really need this
    }
}
