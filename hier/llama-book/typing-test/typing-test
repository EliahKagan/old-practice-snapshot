#!/usr/bin/env perl

use strict;
use warnings;
use autodie;

use Readonly;
use IO::Prompt::Tiny qw(prompt);
use Term::ANSIColor;

Readonly my $NUMBER_OF_REPS => 10;
Readonly my $GUESS_RATIO_FAILPOINT => 0.2;

Readonly my $EXIT_STATUS_WIN => 0;
Readonly my $EXIT_STATUS_LOSE => 1;

Readonly my $AS_PERCENT => 100;   #  <--- try hard not to change this one
Readonly my $DEBUG_RECURRENCE => 0;

sub trim {
    my $str = shift;
    $str =~ s/^\s+//;
    $str =~ s/\s+$//;
    return $str;
}

sub regular_pluralize {
    my ($number, $word) = @_;
    return sprintf '%d %s%s', $number, $word, ($number == 1 ? q{} : q{s});
}

sub duration {
    my ($start, $end) = @_;
    return regular_pluralize($end - $start, 'second');
}

sub println {   # print a line, in color, using a printf/sprintf format string
    my ($color_spec, $fmt, @args) = @_;
    return printf "%s\n", colored(sprintf($fmt, @args), $color_spec);
}

sub load_words {
    my $path = shift;
    my @words;

    open my $in, '<', $path;
    while (<$in>) {
        if (m{^([[:lower:]]+)   # an all-lowercase word
                (?:/|$)}ax) {   # possibly followed by Hunspell metadata
            push @words, $1;
        }
    }
    close $in;

    return @words;
}

sub acknowledge_recurrence {
    my $word = shift;

    if ($DEBUG_RECURRENCE) {
        print {*STDERR}
              "DEBUG: Skipping \"$word,\" which has appeared before.\n";
    }

    return;
}

my @words = load_words '/usr/share/hunspell/en_US.dic';
my $count = scalar @words;
my $max_errors = int($count * $GUESS_RATIO_FAILPOINT);

my %history;
my $errors = 0;
my $start = time;

for my $i (1 .. $NUMBER_OF_REPS) {
    my $word = $words[int rand $count];

    if (exists $history{$word}) {
        acknowledge_recurrence $word;
        redo;
    }

    $history{$word} = 1;

    if (trim(prompt "Type the word \"$word\":") ne $word) {
        print "Sorry, that's not right!\n";
        if (++$errors <= $max_errors) { redo } else { last }
    }
}

my $end = time;

if ($errors <= $max_errors) {
    my $color_spec = ($errors == 0 ? 'green' : 'yellow');

    println $color_spec, q{You've completed the test, with %s, in %s.},
            regular_pluralize($errors, 'error'), duration($start, $end);

    exit $EXIT_STATUS_WIN;
} else {
    println 'red', q{You misspelled over %.0f%% of the dictionary in %s. Sad!},
            $GUESS_RATIO_FAILPOINT * $AS_PERCENT, duration($start, $end);

    exit $EXIT_STATUS_LOSE;
}
