using System;
using System.Collections.Generic;
using System.Linq;
using static System.Console;

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

internal static class Primes {
    private static IEnumerable<int> Sieve(int n) // yields primes up to n
    {
        var a = new bool[n + 1]; // false means not marked as composite
    
        var imax = Convert.ToInt32(Math.Floor(Math.Sqrt(n)));
        for (var i = 3; i <= imax; i += 2) {
            if (!a[i]) {
                var jstep = i * 2;
                for (var j = i * i; j <= n; j += jstep) a[j] = true;
            }
        }
    
        yield return 2;
        for (var k = 3; k <= n; k += 2)
            if (!a[k]) yield return k;
    }

    internal static int[] To(int n) => Sieve(n).ToArray(); // primes to n
}

internal static class Arithmetic {
    private const int Billion = 1000000000; // highest power of 10 int can fit

    private static readonly int[] PowersOf10 = ComputePowersOf10().ToArray();

    private static IEnumerable<int> ComputePowersOf10()
    {
        for (var i = 1; ; i *= 10) {
            yield return i;
            if (i == Billion) yield break;
        }
    }

    // Returns the highest power of 10 strictly less than n. Assumes n > 1.
    internal static int PrevPowerOf10(this int n)
    {
        var i = Array.BinarySearch(PowersOf10, n);
        return PowersOf10[(i < 0 ? ~i : i) - 1];
    }
}

internal static class TruncationArithmetic {
    private static int Left(int n) => n / 10;

    private static int Right(int n) => n % n.PrevPowerOf10();

    private static bool Has(this List<int> elems, int value)
            => elems.BinarySearch(value) >= 0;

    // Returns elements of a whose left and right trunctions are all also in a.
    // a must be strictly increasing (sorted and unique) and everywhere > 0.
    internal static List<int> Truncateables(this int[] a)
    {
        var b = new List<int>(a.Length);
        b.AddRange(a.TakeWhile(n => n < 10));
        
        foreach (var n in a.Skip(b.Count))
            if (b.Has(Left(n)) && b.Has(Right(n))) b.Add(n);

        return b;
    }
}

internal static class Solution {
    private static void Main()
    {
        var max = int.Parse(ReadLine()) - 1;
        WriteLine(Primes.To(max).Truncateables().SkipWhile(p => p < 10).Sum());
    }
}
