using System;
using System.Collections.Generic;
using System.Linq;

[assembly: System.Reflection.AssemblyVersion("1.0.0.0")]

internal static class Primes {
    private static IEnumerable<int> Sieve(int n) // yields primes up to n
    {
        var a = new bool[n + 1]; // false means not marked as composite
    
        var imax = Convert.ToInt32(Math.Floor(Math.Sqrt(n)));
        for (var i = 3; i <= imax; i += 2) {
            if (!a[i]) {
                var jstep = i * 2;
                for (var j = i * i; j <= n; j += jstep) a[j] = true;
            }
        }
    
        yield return 2;
        for (var k = 3; k <= n; k += 2)
            if (!a[k]) yield return k;
    }

    internal static int[] To(int n) => Sieve(n).ToArray(); // primes to n
}

internal static class TruncationArithmetic {
    private static int Log10(int n)
            => Convert.ToInt32(Math.Floor(Math.Log10(n)));

    private static int Left(int n) => n / 10;

    private static int Right(int n) => n % Log10(n);//

    private static bool Has(this List<int> a, int k) => a.BinarySearch(k) >= 0;

    // Returns elements of a whose left and right trunctions are all also in a.
    // a must be strictly increasing (sorted and unique) and everywhere > 0.
    internal static List<int> Truncateables(this int[] a)
    {
        var n = a.Length;
        var b = new List<int>(n);

        var i = 0;
        while (i != n && a[i] < 10) b.Add(a[i]);

        for (; i != n; ++i)
    }
}